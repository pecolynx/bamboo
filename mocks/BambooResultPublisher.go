// Code generated by mockery v2.34.2. DO NOT EDIT.

package bamboo

import (
	context "context"

	proto "github.com/pecolynx/bamboo/proto"
	mock "github.com/stretchr/testify/mock"
)

// BambooResultPublisher is an autogenerated mock type for the BambooResultPublisher type
type BambooResultPublisher struct {
	mock.Mock
}

type BambooResultPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *BambooResultPublisher) EXPECT() *BambooResultPublisher_Expecter {
	return &BambooResultPublisher_Expecter{mock: &_m.Mock}
}

// Ping provides a mock function with given fields: ctx
func (_m *BambooResultPublisher) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BambooResultPublisher_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type BambooResultPublisher_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BambooResultPublisher_Expecter) Ping(ctx interface{}) *BambooResultPublisher_Ping_Call {
	return &BambooResultPublisher_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *BambooResultPublisher_Ping_Call) Run(run func(ctx context.Context)) *BambooResultPublisher_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BambooResultPublisher_Ping_Call) Return(_a0 error) *BambooResultPublisher_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BambooResultPublisher_Ping_Call) RunAndReturn(run func(context.Context) error) *BambooResultPublisher_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: ctx, resultChannel, responseType, data
func (_m *BambooResultPublisher) Publish(ctx context.Context, resultChannel string, responseType proto.ResponseType, data []byte) error {
	ret := _m.Called(ctx, resultChannel, responseType, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, proto.ResponseType, []byte) error); ok {
		r0 = rf(ctx, resultChannel, responseType, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BambooResultPublisher_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type BambooResultPublisher_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - ctx context.Context
//   - resultChannel string
//   - responseType proto.ResponseType
//   - data []byte
func (_e *BambooResultPublisher_Expecter) Publish(ctx interface{}, resultChannel interface{}, responseType interface{}, data interface{}) *BambooResultPublisher_Publish_Call {
	return &BambooResultPublisher_Publish_Call{Call: _e.mock.On("Publish", ctx, resultChannel, responseType, data)}
}

func (_c *BambooResultPublisher_Publish_Call) Run(run func(ctx context.Context, resultChannel string, responseType proto.ResponseType, data []byte)) *BambooResultPublisher_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(proto.ResponseType), args[3].([]byte))
	})
	return _c
}

func (_c *BambooResultPublisher_Publish_Call) Return(_a0 error) *BambooResultPublisher_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BambooResultPublisher_Publish_Call) RunAndReturn(run func(context.Context, string, proto.ResponseType, []byte) error) *BambooResultPublisher_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewBambooResultPublisher creates a new instance of BambooResultPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBambooResultPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *BambooResultPublisher {
	mock := &BambooResultPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
