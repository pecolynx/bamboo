// Code generated by mockery v2.34.2. DO NOT EDIT.

package bamboo

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BambooResultSubscriber is an autogenerated mock type for the BambooResultSubscriber type
type BambooResultSubscriber struct {
	mock.Mock
}

type BambooResultSubscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *BambooResultSubscriber) EXPECT() *BambooResultSubscriber_Expecter {
	return &BambooResultSubscriber_Expecter{mock: &_m.Mock}
}

// OpenSubscribeConnection provides a mock function with given fields: ctx, resultChannel
func (_m *BambooResultSubscriber) OpenSubscribeConnection(ctx context.Context, resultChannel string) (SubscribeFunc, CloseSubscribeConnectionFunc, error) {
	ret := _m.Called(ctx, resultChannel)

	var r0 SubscribeFunc
	var r1 CloseSubscribeConnectionFunc
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (SubscribeFunc, CloseSubscribeConnectionFunc, error)); ok {
		return rf(ctx, resultChannel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) SubscribeFunc); ok {
		r0 = rf(ctx, resultChannel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SubscribeFunc)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) CloseSubscribeConnectionFunc); ok {
		r1 = rf(ctx, resultChannel)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(CloseSubscribeConnectionFunc)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, resultChannel)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BambooResultSubscriber_OpenSubscribeConnection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenSubscribeConnection'
type BambooResultSubscriber_OpenSubscribeConnection_Call struct {
	*mock.Call
}

// OpenSubscribeConnection is a helper method to define mock.On call
//   - ctx context.Context
//   - resultChannel string
func (_e *BambooResultSubscriber_Expecter) OpenSubscribeConnection(ctx interface{}, resultChannel interface{}) *BambooResultSubscriber_OpenSubscribeConnection_Call {
	return &BambooResultSubscriber_OpenSubscribeConnection_Call{Call: _e.mock.On("OpenSubscribeConnection", ctx, resultChannel)}
}

func (_c *BambooResultSubscriber_OpenSubscribeConnection_Call) Run(run func(ctx context.Context, resultChannel string)) *BambooResultSubscriber_OpenSubscribeConnection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BambooResultSubscriber_OpenSubscribeConnection_Call) Return(_a0 SubscribeFunc, _a1 CloseSubscribeConnectionFunc, _a2 error) *BambooResultSubscriber_OpenSubscribeConnection_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *BambooResultSubscriber_OpenSubscribeConnection_Call) RunAndReturn(run func(context.Context, string) (SubscribeFunc, CloseSubscribeConnectionFunc, error)) *BambooResultSubscriber_OpenSubscribeConnection_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *BambooResultSubscriber) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BambooResultSubscriber_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type BambooResultSubscriber_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *BambooResultSubscriber_Expecter) Ping(ctx interface{}) *BambooResultSubscriber_Ping_Call {
	return &BambooResultSubscriber_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *BambooResultSubscriber_Ping_Call) Run(run func(ctx context.Context)) *BambooResultSubscriber_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *BambooResultSubscriber_Ping_Call) Return(_a0 error) *BambooResultSubscriber_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *BambooResultSubscriber_Ping_Call) RunAndReturn(run func(context.Context) error) *BambooResultSubscriber_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// NewBambooResultSubscriber creates a new instance of BambooResultSubscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBambooResultSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *BambooResultSubscriber {
	mock := &BambooResultSubscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
