// Code generated by mockery v2.34.2. DO NOT EDIT.

package bamboo

import (
	context "context"

	proto "github.com/pecolynx/bamboo/proto"
	mock "github.com/stretchr/testify/mock"
)

// SubscribeFunc is an autogenerated mock type for the SubscribeFunc type
type SubscribeFunc struct {
	mock.Mock
}

type SubscribeFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *SubscribeFunc) EXPECT() *SubscribeFunc_Expecter {
	return &SubscribeFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx
func (_m *SubscribeFunc) Execute(ctx context.Context) (*proto.WorkerResponse, error) {
	ret := _m.Called(ctx)

	var r0 *proto.WorkerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*proto.WorkerResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *proto.WorkerResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.WorkerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubscribeFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type SubscribeFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SubscribeFunc_Expecter) Execute(ctx interface{}) *SubscribeFunc_Execute_Call {
	return &SubscribeFunc_Execute_Call{Call: _e.mock.On("Execute", ctx)}
}

func (_c *SubscribeFunc_Execute_Call) Run(run func(ctx context.Context)) *SubscribeFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SubscribeFunc_Execute_Call) Return(_a0 *proto.WorkerResponse, _a1 error) *SubscribeFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SubscribeFunc_Execute_Call) RunAndReturn(run func(context.Context) (*proto.WorkerResponse, error)) *SubscribeFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscribeFunc creates a new instance of SubscribeFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscribeFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *SubscribeFunc {
	mock := &SubscribeFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
